

/*
* Что нужно доделать : 

1) Странчку с ошибкой 404 и делать на нее редирект в случае когда переход делают куда-то не туда
2) Добавить лайки и сделать так чтобы один пользовтель не мог поставить больше одного лайка
3) Добавить возможность для пользователей комментировать чужие записи 
4) Подумать над тем какие миддлвары еще можно использовать?
5) Добавить кнопки "отсортировать по рейтингу" и "по дате создания" на страницу все рецензии/посты на страницах allPublics и allReviews
6) Сделать стили: 

      1) На главной странице(/home): Карусель с самыми популярными рецензиями и публикациями 
      2) На странице все рецензии/публикации(/allpublics and /allreviews): сделать Карусель с наиболее популярными публикациями/рецензиями
      3) Изменить navbar и передвинуть кнопки "Войти" и "Зарегистрироваться" в в правый врехний угол, чтобы они располагались отдельно

7) Создать папки во views/controllers/routes и сложить по смыслу файлы для того чтобы не было такого нагромождения в папках

* Разобрать модальные окна, а именно сделать так, чтобы при нажатии на кнопку "войти" происходил не redirect на страницу с формой, 
* а всплывало модальное окно с формой. (войти, регистрация, форма изменить запись/рецензию) Написать фитч для этих окон.

? Какие еще функции, на подобии renderTemplate, можно создать чтобы вынести в них часть логики, для того чтобы сократить код?



*/


/*
*  Какие возникли трудности и что нужно повторить: 
1) req.params - параметризированные запросы. 
Для того чтобы удлаить нужную запись по нажатию на кнопку "Удалить" привязал id записи, и отлавливал с помощью req.params
2) fetch - при написании fetch.
Для того, чтобы отлавливать "клики" по всем страницам: 
    2.1) Создал в Layout:  <body><div class="container"></div></body>
    2.2) в application.js уже достал достал этот див ч/з document.querySelector('.container') и записал в переменную (divContainer);
    2.3) навесил на divContainer "addEventListener" по click и задал id всем кнопкам.
    2.4) При отражении всех записей/рецензий обернул еще в один див и назвал их соответственно их назначению: (<div key={e.id} className="PostContainer" id={e.id}>)
    2.5) Отлавливал через event.target.id === "buttonDeletePublic" {const postId = event.target.closest('.PostContainer')}

    2.1) Можно также завернуть каждую кнопку в форму и отлавливать по форме ч/з submit/click

3) Чтобы реализовать функционал кнопки "изменить запись/рецензию": 
    3.1) Создал отедльные страницы с формами: EditPostForm и EditReviewForm
    3.2) Отрендерил их и передал ч/з пропсы post/review в том числе и их post.id/review.id
              action = {`/publicform/editform/${post.id}`}
    3.3) Чтобы в полях input появлялось значение раннее введенное пользователем использовал value = {post.name}
    3.4) Добавил rout: router.get('/editform/:id', reviewsEditform);
    3.5) Написал фитч, но перед этим обернул содержимое формы еще в один див, чтобы привязать ему post.id и на бэке получить его 
        ч/з req.params 
    3.6)  записал его в переменную: const postId = event.target.children[0].id
    3.7) Написал fetch который отправляет на роут: `/reviewform/editform/${reviewId}` методом put
    3.8) Принял на бэке, создав роут и прописав логики изменения в контроллере:  router.put('/editform/:id', reviewsEditPostform) 
    3.9) Отправил стату и сделал redirect на my/reviews

4) Middlewares: 

    4.1) sessionControl - для контроля сессий а именно: чтобы при переходе на любую страницу отображался req.session и в нем будет наш user: {id, name}
    req.session.user = { id: user.id, name: user.login }; 
    user.id потрбуется для: чтобы отображения всех записей конкретного юзера который авторизовался;
    4.2) checkUser - для "защиты" или поверки наших endpoints: чтобы только авторизованный юзер мог осуществлять какие-то действия после авторизации   

*/